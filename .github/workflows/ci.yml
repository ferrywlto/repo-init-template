name: Continuous Integration (Build, Test, Lint) 

env:
  CI: true
  SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN_CI }}
  SLACK_CHANNEL: 'ci-failures'
#  REPO_NAME: ${{ github.repository }}
#  REPO_URL: ${{ github.event.repository.html_url }}
#  PULL_REQUEST_URL: ${{ github.event.pull_request.html_url }}
#  PULL_REQUEST_TITLE: ${{ github.event.pull_request.title }}
#  SOURCE_BRANCH: ${{ github.event.before }}
#  TARGET_BRANCH: ${{ github.event.after }}
#  TRIGGERED_BY: ${{ github.actor }}

on:
  workflow_dispatch:
  pull_request:
  
jobs:
  continuous-integration:
    name: Continuous Integration
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
        
#      - name: Get commit info
#        id: get-commit-info
#        run: |
#          FULL_NAME=$(git show -s --format='%an' ${{ github.sha }})
#          COMMIT_INFO=$(git log -1 --pretty=format:'%h %ae' $GITHUB_SHA)
#          COMMIT_SHA=$(echo $COMMIT_INFO | awk '{print $1}')
#          COMMIT_EMAIL=$(echo $COMMIT_INFO | awk '{print $2}')
#          echo $COMMIT_SHA
#          echo ${{ github.sha }}
#          echo "commit-sha=${COMMIT_SHA}" >> $GITHUB_OUTPUT
#          echo "full-name=${FULL_NAME}" >> $GITHUB_OUTPUT
#
#      - name: Get user profile URL
#        id: user-profile-url
#        run: |
#          pr_url="https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.number }}"
#          response=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" ${pr_url})
#          user_url=$(echo "$response" | jq -r '.user.url')
#          echo ${pr_url}
#          echo ${{ github.event.pull_request.html_url }}
#          echo "profile-url=${user_url}" >> $GITHUB_OUTPUT

      - name: Get last commit user info
        id: last-commit-user-info
        run: |
          # Get the commit details using the GitHub REST API
          response=$(curl -s -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/${{ github.repository }}/commits/${{ github.sha }})
          
          # Extract the author login from the response using jq
          author_name=$(echo $response | jq -r '.commit.author.name')
          commit_url=$(echo $response | jq -r '.html_url')
          echo "full-name=${author_name}" >> $GITHUB_OUTPUT
          echo "commit-url=${author_name}" >> $GITHUB_OUTPUT
          
          author_login=$(echo $response | jq -r '.author.login')
          
          # Get the user details using the GitHub REST API
          user_response=$(curl -s -H "Accept: application/vnd.github.v3+json" https://api.github.com/users/${author_login})

          # Extract the profile URL from the user response using jq
          profile_url=$(echo $user_response | jq -r '.html_url')

          # Print the profile URL to the console
          echo "profile-url=${profile_url}" >> $GITHUB_OUTPUT
          
      - name: Setup message function
        id: slack-message
        run: |
          function generate_message() {
            local message="{\
                \"channel\": \"$SLACK_CHANNEL\",\
                \"text\": \"<!here>\\n Continuous integration failure triggered by \
                <${{ steps.last-commit-user-info.outputs.profile-url }}|${{ steps.last-commit-user-info.outputs.full-name }}>\\n\
                Repository: <${{ github.event.repository.html_url }}|${{ github.repository }}>\\n\
                Pull Request: <${{ github.event.pull_request.html_url }}|${{ github.event.pull_request.html_url }}>\\n\
                Commit: <${{ steps.last-commit-user-info.outputs.commit-url }}|${{ github.sha }}>\\n\
                Reason: $1\"\
            }"
            echo $message
          }
          echo "message-issue-build=$(generate_message "Build failed")" >> $GITHUB_OUTPUT
          echo "message-issue-docker=$(generate_message "Docker build failed")" >> $GITHUB_OUTPUT
          echo "message-issue-test=$(generate_message "Unit tests broken")" >> $GITHUB_OUTPUT
          echo "message-issue-quality=$(generate_message "Code quality issues")" >> $GITHUB_OUTPUT
          
      - name: Setup .NET
        uses: actions/setup-dotnet@v2.0.0
        with:
          dotnet-version: 6.0.x

      - name: Build dotnet code
        run: |
          dotnet restore
          dotnet build --no-restore --configuration Release
          
      - name: Notify Slack on build failure
        if: ${{ failure() }}
        run: |
          curl --location --request POST \
          --header 'Authorization: Bearer ${{ env.SLACK_BOT_TOKEN }}' \
          --header 'Content-type: application/json; charset=utf-8' \
          --data-raw '${{ steps.slack-message.outputs.message-issue-build }}' \
          https://slack.com/api/chat.postMessage
        
#      - name: Setup Docker Buildx
#        uses: docker/setup-buildx-action@v2
#        with:
#          version: latest
#        
#      - name: Build docker image
#        run: |
#          docker build -t ${{ env.REPO_NAME }}:${{ steps.get-commit-info.outputs.commit-sha }} .
#        
#      - name: Notify Slack on docker build failure
#        if: ${{ failure() }}
#        run: |
#          curl --location --request POST \
#          --header 'Authorization: Bearer ${{ env.SLACK_BOT_TOKEN }}' \
#          --header 'Content-type: application/json; charset=utf-8' \
#          --data-raw '${{ steps.slack-message.outputs.message-issue-docker }}' \
#          https://slack.com/api/chat.postMessage
          
#      Resume unit tests and code quality analysis when they are ready
#      - name: Run unit tests
#        run: |
#          dotnet test
#
#      - name: Notify Slack on unit test failure
#        if: ${{ failure() }}
#        run: |
#          curl --location --request POST \
#          --header 'Authorization: Bearer ${{ env.SLACK_BOT_TOKEN }}' \
#          --header 'Content-type: application/json; charset=utf-8' \
#          --data-raw '${{ steps.slack-message.outputs.message-issue-test }}' \
#          https://slack.com/api/chat.postMessage
#      
#      - name: Code Quality Analysis
#        uses: JetBrains/qodana-action@main
#        env:
#          QODANA_TOKEN: ${{ secrets.QODANA_TOKEN }}
#        with:
#          args: --baseline,qodana.sarif.json
#
#      - name: Notify Slack on code quality failure
#        if: ${{ failure() }}
#        run: |
#          curl --location --request POST \
#          --header 'Authorization: Bearer ${{ env.SLACK_BOT_TOKEN }}' \
#          --header 'Content-type: application/json; charset=utf-8' \
#          --data-raw '${{ steps.slack-message.outputs.message-issue-quality }}' \
#          https://slack.com/api/chat.postMessage
